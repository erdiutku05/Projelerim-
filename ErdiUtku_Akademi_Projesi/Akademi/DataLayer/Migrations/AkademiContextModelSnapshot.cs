// <auto-generated />
using System;
using DataLayer.Concrete.EfCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(AkademiContext))]
    partial class AkademiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("EntityLayer.Concrete.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Adverts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 836, DateTimeKind.Local).AddTicks(9484),
                            Description = "dsdasd",
                            IsApproved = true,
                            Price = 45m,
                            TeacherId = 4,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 836, DateTimeKind.Local).AddTicks(9490),
                            Url = "dsdds"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "Matematik",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8894),
                            Description = "Üniversite Düzeyinde Matematik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8899),
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Analiz",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8903),
                            Description = "Analiz 1-2-3-4 Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8904),
                            Url = "analiz"
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "İstatistik",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8905),
                            Description = "Üniversite Düzeyinde İstatistik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8906),
                            Url = "istatistik"
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Analitik Geometri",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8907),
                            Description = "Üniversite Düzeyinde Analitik Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8908),
                            Url = "analitik-geometri"
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Oyun Teorisi",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8909),
                            Description = "Oyun Teorisi 1-2-3-4 Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8910),
                            Url = "oyun-teorisi"
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Bilgisayar Programcılığı",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8912),
                            Description = "C# , Python , Java Dersleri",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8912),
                            Url = "bilgisayar-programciligi"
                        },
                        new
                        {
                            Id = 7,
                            BranchName = "Algoritmalar",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8914),
                            Description = "Algoritmalar 1-2 dersleri verilir.",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8914),
                            Url = "algoritmalar"
                        },
                        new
                        {
                            Id = 8,
                            BranchName = "Bilgisayar Mimarisi",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8916),
                            Description = "Bilgisayar Mimarisi 1-2 dersleri verilir.",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8917),
                            Url = "bilgisayar-mimarisi"
                        },
                        new
                        {
                            Id = 9,
                            BranchName = "Soyut Matematik",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8918),
                            Description = "Soyut Matematik 1-2-3-4 dersleri verilir.",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8919),
                            Url = "soyut-matematik"
                        },
                        new
                        {
                            Id = 10,
                            BranchName = "Matlab",
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8920),
                            Description = "Matlab 1-2 dersleri verilir.",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 838, DateTimeKind.Local).AddTicks(8921),
                            Url = "matlab"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "c31f8d49-9a12-4f19-a03d-c358594cd9b6"
                        },
                        new
                        {
                            Id = 2,
                            UserId = "f5f3d15a-b5ae-438b-a0a5-5088a553c665"
                        },
                        new
                        {
                            Id = 3,
                            UserId = "cb76beb4-41d5-4904-9493-fd67702781b2"
                        },
                        new
                        {
                            Id = 4,
                            UserId = "1a3110df-5cdf-4b46-80ff-402c0228c23c"
                        },
                        new
                        {
                            Id = 5,
                            UserId = "007a6943-e32f-45ff-831a-8495521f0bd8"
                        },
                        new
                        {
                            Id = 6,
                            UserId = "90c70b96-a9a7-47fd-a5b9-8a1cc1bd3cbd"
                        },
                        new
                        {
                            Id = 7,
                            UserId = "ed580c86-2e0d-4979-b6fd-17b880d049d2"
                        },
                        new
                        {
                            Id = 8,
                            UserId = "cfc42ab8-9dce-4c75-ab56-b028ce37d410"
                        },
                        new
                        {
                            Id = 9,
                            UserId = "6995048a-a055-4e6e-9ad1-6826c195cbef"
                        },
                        new
                        {
                            Id = 10,
                            UserId = "288292d3-c958-412e-b541-41d63c62ced1"
                        },
                        new
                        {
                            Id = 11,
                            UserId = "018770f5-96dc-4b2e-a708-cfed11f446b0"
                        },
                        new
                        {
                            Id = 12,
                            UserId = "02fd7a75-988b-47aa-882f-7005f7ec1d34"
                        },
                        new
                        {
                            Id = 13,
                            UserId = "728d8571-f0b8-4eea-adac-43f7951505c2"
                        },
                        new
                        {
                            Id = 14,
                            UserId = "0e8d7b3b-9eb0-4d07-b0e9-7d86d02ee953"
                        },
                        new
                        {
                            Id = 15,
                            UserId = "32d5a47e-b95c-49f2-87dd-e6bc21c6da2f"
                        },
                        new
                        {
                            Id = 16,
                            UserId = "d67af878-0c23-47ed-8f47-a6df9883b511"
                        },
                        new
                        {
                            Id = 17,
                            UserId = "6f90465e-7fff-4216-8a76-34e7b278e735"
                        },
                        new
                        {
                            Id = 18,
                            UserId = "1754aa6b-9727-4bdf-ade0-7b5fa99a300f"
                        },
                        new
                        {
                            Id = 19,
                            UserId = "309ddd20-a098-4df6-ba4c-86a9d72f9a49"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5d26f66f-2b0b-4516-99b2-d41133b08d86",
                            Description = "Yöneticiler",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eae1d03d-c1d5-4416-823d-038f86183653",
                            Description = "Öğretmenler",
                            Name = "Ogretmen",
                            NormalizedName = "OGRETMEN"
                        },
                        new
                        {
                            Id = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb",
                            Description = "Öğrenciler",
                            Name = "Ogrenci",
                            NormalizedName = "OGRENCI"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c31f8d49-9a12-4f19-a03d-c358594cd9b6",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "ee5bf134-8d94-4898-b22f-bb871cfaa16b",
                            DateOfBirth = new DateTime(2000, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "erdiutku@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Erdi",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Utku",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERDIUTKU@HOTMAIL.COM",
                            NormalizedUserName = "ERDIUTKU",
                            PasswordHash = "AQAAAAIAAYagAAAAEPry4lZwmM306HwX/d7XoqeMDNhVQyEZJQrAn00vxD40GGl7N6ImfAx/3g4GPFP/6g==",
                            Phone = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93babc73-af7f-44f1-a319-e6bb68e0982b",
                            TwoFactorEnabled = false,
                            UserName = "erdiutku"
                        },
                        new
                        {
                            Id = "f5f3d15a-b5ae-438b-a0a5-5088a553c665",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "038d3eba-2bb9-497e-9134-91297120d872",
                            DateOfBirth = new DateTime(2007, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizcakir@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Çakır",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCAKIR@HOTMAIL.COM",
                            NormalizedUserName = "DENIZCAKIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhlpGLYnwaq0p6h/n3MxkX1mMRoPUSiS7dAHfaqtAwfzUDq0ZGmwB+mbHFv2qX4KA==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aec141ae-3b18-4b18-9c04-c1b694fab58d",
                            TwoFactorEnabled = false,
                            UserName = "denizcakir"
                        },
                        new
                        {
                            Id = "cb76beb4-41d5-4904-9493-fd67702781b2",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "c8a61003-adf9-413d-9ab8-5da246df92b2",
                            DateOfBirth = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmetyilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETYILMAZ@GMAİL.COM",
                            NormalizedUserName = "AHMETYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFh7i+l1rE4iJqND3tvCmztkdt4m7ntxVmQWqIAkiLoI9X7mzeL9EMrx/Dy3xQTzYw==",
                            Phone = "5551234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e17f53fd-7b71-4cf2-9f8b-cbbf1a380895",
                            TwoFactorEnabled = false,
                            UserName = "ahmetyilmaz"
                        },
                        new
                        {
                            Id = "1a3110df-5cdf-4b46-80ff-402c0228c23c",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "b513852f-fe5d-46a2-b86c-e346edb0c967",
                            DateOfBirth = new DateTime(2001, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayse.demir@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSE.DEMIR@YAHOO.COM",
                            NormalizedUserName = "AYSEDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEND3EQJM77p5qcfcHsOhudfYcyrCIPmr6QhCV1Z6aDjVuCk5Ldf7/m5AZ450ykeb9g==",
                            Phone = "5329876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43d9227a-eae9-4c2e-a5d6-87f4faaed15e",
                            TwoFactorEnabled = false,
                            UserName = "aysedemir"
                        },
                        new
                        {
                            Id = "007a6943-e32f-45ff-831a-8495521f0bd8",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "e8d8f0fa-c686-47a5-b142-d0d29e216fe7",
                            DateOfBirth = new DateTime(2009, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmetkaya@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETKAYA@HOTMAIL.COM",
                            NormalizedUserName = "MEHMETKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEFsxM3lzJ5S4HFQAZkgPsUEpqPaJYZa+n/j2FKBroWfBoAGVJxtYGFYmWgn0bNRO4g==",
                            Phone = "5396542513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c797188f-1531-4a5a-9e31-d80acce6efd4",
                            TwoFactorEnabled = false,
                            UserName = "mehmetkaya"
                        },
                        new
                        {
                            Id = "90c70b96-a9a7-47fd-a5b9-8a1cc1bd3cbd",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "ea5e1c8a-2fcd-44b9-9acd-3c8fdd3eda61",
                            DateOfBirth = new DateTime(2003, 3, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasahin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fatma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATMASAHIN@GMAIL.COM",
                            NormalizedUserName = "FATMASAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEANJ9crRD3aB8nqkMHmjFO3NQebTcXq1/rJNqY6tms6k86wOLECW9rI0MF0dyZdS/w==",
                            Phone = "5334567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5409e8f6-a40c-4a39-92ce-e7b9d4cb2f0c",
                            TwoFactorEnabled = false,
                            UserName = "fatmasahin"
                        },
                        new
                        {
                            Id = "ed580c86-2e0d-4979-b6fd-17b880d049d2",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "3aef4bc9-877b-4381-8702-d7ca9533033d",
                            DateOfBirth = new DateTime(2008, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emreakin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Akın",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMREAKIN@HOTMAIL.COM",
                            NormalizedUserName = "EMREAKIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELTVAZQtuj8u4i0HYovoO1xyGSfQjBRBHfBl86QkAzRwCSd27v+OTqUmmuQcYOGvwQ==",
                            Phone = "5379876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3a9dff45-ce62-4209-b6b2-73330636d1e3",
                            TwoFactorEnabled = false,
                            UserName = "emreakin"
                        },
                        new
                        {
                            Id = "cfc42ab8-9dce-4c75-ab56-b028ce37d410",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "cac4760b-51d7-4dcc-bd96-a1401cc387b4",
                            DateOfBirth = new DateTime(2005, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zeynepturk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Zeynep",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Türk",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZEYNEPTURK@GMAIL.COM",
                            NormalizedUserName = "ZEYNEPTURK",
                            PasswordHash = "AQAAAAIAAYagAAAAEMP1b/S0o/Ar2gnsx/DI9ebTyEuPHFQr9jSfOkbdrd/4ChdeHSci9/dJwOKBibmNUw==",
                            Phone = "5336549872",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2160f2f-c817-4b97-a5ea-c0948522f2d0",
                            TwoFactorEnabled = false,
                            UserName = "zeynepturk"
                        },
                        new
                        {
                            Id = "6995048a-a055-4e6e-9ad1-6826c195cbef",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "dc485f14-cca1-41f4-8f9d-fda4e9bfef7e",
                            DateOfBirth = new DateTime(2007, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ali.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "ALIYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQpaji7wBX6LA+shEjlh5DH1T25s3OUdoK9DjZKPA9CpWW5I/+DdR/8NdP5np6uug==",
                            Phone = "5559876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d25a412e-0a2a-4e73-9361-3c62e88bc458",
                            TwoFactorEnabled = false,
                            UserName = "aliyildiz"
                        },
                        new
                        {
                            Id = "288292d3-c958-412e-b541-41d63c62ced1",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "54b3ef10-2f24-4755-a239-1dc78b3b453f",
                            DateOfBirth = new DateTime(2009, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mustafaozkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mustafa",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Özkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUSTAFAOZKAN@GMAIL.COM",
                            NormalizedUserName = "MUSTAFAOZKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHRBICoCEG6UqeHyrXb27lgxu7Bs7LLmRLPr4L9UXw/vpFWMrb59L/9W9TrFEyyfuA==",
                            Phone = "5423456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3da79c08-59f3-4403-8d52-1f77e0cff389",
                            TwoFactorEnabled = false,
                            UserName = "mustafaozkan"
                        },
                        new
                        {
                            Id = "018770f5-96dc-4b2e-a708-cfed11f446b0",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "a96d5efc-4a97-48a5-a071-81ff0b4713d1",
                            DateOfBirth = new DateTime(2008, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Esra",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "ESRAAYDIN@HOTMAIL.COM",
                            NormalizedUserName = "ESRAAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFfWfrWageKQf/qHgsUhuibjmTk+3Tm6H12Guy7ukNO7OOHJ3HK2gm4mOqgUf1PCtA==",
                            Phone = "5397891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "574c1e4b-0620-408a-88cf-2fa4c363742c",
                            TwoFactorEnabled = false,
                            UserName = "esraaydin"
                        },
                        new
                        {
                            Id = "02fd7a75-988b-47aa-882f-7005f7ec1d34",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "454f2877-8f05-4fb7-8c62-be92c54025bf",
                            DateOfBirth = new DateTime(1980, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "selinkar@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Selin",
                            Gender = "Kadın",
                            ImageId = 1,
                            LastName = "Kar",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELINKAR@HOTMAIL.COM",
                            NormalizedUserName = "SELINKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKma0XzWlUIWGrjgymogXTfPcii0QIgjGdh+RGJHAebBErOpIJ6NFpOwVL/2enZD7A==",
                            Phone = "5399782513",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91113eee-da84-4a0e-83c4-25b94b109a69",
                            TwoFactorEnabled = false,
                            UserName = "selinkar"
                        },
                        new
                        {
                            Id = "728d8571-f0b8-4eea-adac-43f7951505c2",
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "26d3409a-f6a4-4229-8add-fcb8630c16c5",
                            DateOfBirth = new DateTime(1990, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "cem.yilmaz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Cem",
                            Gender = "Erkek",
                            ImageId = 2,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "CEM.YILMAZ@GMAIL.COM",
                            NormalizedUserName = "CEMYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAECaQHP1Y+UEsDP0r7JO3/VGSmTIDqGuCUFvSFWqLG6MZSdwXa1zS3Azl45C91FRW1Q==",
                            Phone = "5323456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1555bf08-e726-48ee-b57f-f36fb523e781",
                            TwoFactorEnabled = false,
                            UserName = "cemyilmaz"
                        },
                        new
                        {
                            Id = "0e8d7b3b-9eb0-4d07-b0e9-7d86d02ee953",
                            AccessFailedCount = 0,
                            City = "İstanbul",
                            ConcurrencyStamp = "ba7e1b22-f74b-4260-bfd0-3ac2856bd8f1",
                            DateOfBirth = new DateTime(1992, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "esraaydin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şevval",
                            Gender = "Kadın",
                            ImageId = 3,
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "sevval.demir@hotmail.com",
                            NormalizedUserName = "SEVVALDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEEW0h4O97BfpMafoelUZHVON89aS30jrQyvQ10HTtqNkKUPSumonuGhw5LTqJXD5ww==",
                            Phone = "5387891234",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c324cd4-a93d-4f43-bba0-93b75d4f1bb4",
                            TwoFactorEnabled = false,
                            UserName = "sevvaldemir"
                        },
                        new
                        {
                            Id = "32d5a47e-b95c-49f2-87dd-e6bc21c6da2f",
                            AccessFailedCount = 0,
                            City = "İzmir",
                            ConcurrencyStamp = "a9311ad2-9b2d-4f6e-b001-dd815d53021a",
                            DateOfBirth = new DateTime(1994, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mehmet.yildiz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageId = 4,
                            LastName = "Yıldız",
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMET.YILDIZ@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEQVryAmYVunM+3X7NhHRtScBd9bS2jYWpejska2Ds7Q7UiW/nann68vgzdayyw9w==",
                            Phone = "5336549876",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8a44f6d-c8ef-4ffc-9189-aa8d2304b8f9",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildiz"
                        },
                        new
                        {
                            Id = "d67af878-0c23-47ed-8f47-a6df9883b511",
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "a5faffe1-7ad6-42da-9d00-cefa7b2cb391",
                            DateOfBirth = new DateTime(1980, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gul.sahin@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gül",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Şahin",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUL.SAHIN@HOTMAIL.COM",
                            NormalizedUserName = "GULSAHIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEi2rnQMAObSZc+QjVTvlOsVCBYLjPfv+LbZ8DoUT5K4PTKJ6L4WrKN9PSxjj0Lz2w==",
                            Phone = "5361234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71643915-e95d-440f-99fe-98a9307974cc",
                            TwoFactorEnabled = false,
                            UserName = "gulsahin"
                        },
                        new
                        {
                            Id = "6f90465e-7fff-4216-8a76-34e7b278e735",
                            AccessFailedCount = 0,
                            City = "Kayseri",
                            ConcurrencyStamp = "16e21e62-cab0-4ea2-87e2-a760e2ffe468",
                            DateOfBirth = new DateTime(1987, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kemal.kaya@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Kaya",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMAL.KAYA@GMAIL.COM",
                            NormalizedUserName = "KEMALKAYA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGA+oB9NjPOBnKqboBfkQHj85jIES6JbjZ7D3W44b6NB9cq3VNL8RLOMbV1otTybiQ==",
                            Phone = "5359876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1c92567-b7c0-43d9-b727-fa363fab511a",
                            TwoFactorEnabled = false,
                            UserName = "kemalkaya"
                        },
                        new
                        {
                            Id = "1754aa6b-9727-4bdf-ade0-7b5fa99a300f",
                            AccessFailedCount = 0,
                            City = "Adana",
                            ConcurrencyStamp = "22167b14-2cfd-4e6c-9105-9cd2de8186d3",
                            DateOfBirth = new DateTime(1990, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gokhan.aydin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Gökhan",
                            Gender = "Erkek",
                            ImageId = 5,
                            LastName = "Aydın",
                            LockoutEnabled = false,
                            NormalizedEmail = "GOKHAN.AYDIN@GMAIL.COM",
                            NormalizedUserName = "GOKHANAYDIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxkQtB2i8F7kedBzTQh6rB+CZGO8LVPRbj8mzkgiLjSfFKvm2yV+wsStGPDiLpHOw==",
                            Phone = "5321234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68219fdd-850e-4a4c-b284-d5983412fd5f",
                            TwoFactorEnabled = false,
                            UserName = "gokhanaydin"
                        },
                        new
                        {
                            Id = "309ddd20-a098-4df6-ba4c-86a9d72f9a49",
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "6614aade-a873-42d5-8465-054388de4767",
                            DateOfBirth = new DateTime(1992, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seyma.yilmaz@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "Şeyma",
                            Gender = "Kadın",
                            ImageId = 5,
                            LastName = "Yılmaz",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEYMA.YILMAZ@HOTMAIL.COM",
                            NormalizedUserName = "SEYMAYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmF6EUx2mPMMnFZC2DMAJ/2yGwz5Kx/a+LBHrG3dzR6i35rRSLq6Lja+rC8Dm8nbg==",
                            Phone = "5399876543",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f97aa087-5200-4272-bfce-cb755c208efb",
                            TwoFactorEnabled = false,
                            UserName = "seymayilmaz"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7154),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7159),
                            Url = "teacher-1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7160),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7161),
                            Url = "teacher-2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7162),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7162),
                            Url = "teacher-3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7163),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7164),
                            Url = "teacher-4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7165),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 47, 839, DateTimeKind.Local).AddTicks(7165),
                            Url = "resimyok.jpg"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdvertId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvertId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1538),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1549),
                            UserId = "f5f3d15a-b5ae-438b-a0a5-5088a553c665"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1555),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1555),
                            UserId = "cb76beb4-41d5-4904-9493-fd67702781b2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1557),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1557),
                            UserId = "1a3110df-5cdf-4b46-80ff-402c0228c23c"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1559),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1559),
                            UserId = "007a6943-e32f-45ff-831a-8495521f0bd8"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1561),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1561),
                            UserId = "90c70b96-a9a7-47fd-a5b9-8a1cc1bd3cbd"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1564),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1564),
                            UserId = "ed580c86-2e0d-4979-b6fd-17b880d049d2"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1566),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1566),
                            UserId = "cfc42ab8-9dce-4c75-ab56-b028ce37d410"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1568),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1568),
                            UserId = "6995048a-a055-4e6e-9ad1-6826c195cbef"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1570),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1570),
                            UserId = "288292d3-c958-412e-b541-41d63c62ced1"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1573),
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1573),
                            UserId = "018770f5-96dc-4b2e-a708-cfed11f446b0"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Graduation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1607),
                            Graduation = "Çanakkale Onsekiz Mart Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1608),
                            UserId = "02fd7a75-988b-47aa-882f-7005f7ec1d34"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1612),
                            Graduation = "Orta Doğu Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1612),
                            UserId = "728d8571-f0b8-4eea-adac-43f7951505c2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1614),
                            Graduation = "İstanbul Teknik Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1615),
                            UserId = "0e8d7b3b-9eb0-4d07-b0e9-7d86d02ee953"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1616),
                            Graduation = "Ege Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1617),
                            UserId = "32d5a47e-b95c-49f2-87dd-e6bc21c6da2f"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1618),
                            Graduation = "Akdeniz Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1619),
                            UserId = "d67af878-0c23-47ed-8f47-a6df9883b511"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1621),
                            Graduation = "Erciyes Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1622),
                            UserId = "6f90465e-7fff-4216-8a76-34e7b278e735"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1624),
                            Graduation = "Çukurova Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1624),
                            UserId = "1754aa6b-9727-4bdf-ade0-7b5fa99a300f"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1626),
                            Graduation = "Uludağ Üniversitesi",
                            IsApproved = true,
                            UpdatedDate = new DateTime(2023, 5, 13, 16, 24, 46, 493, DateTimeKind.Local).AddTicks(1626),
                            UserId = "309ddd20-a098-4df6-ba4c-86a9d72f9a49"
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeacherBranch", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("TeacherBranches");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            BranchId = 1
                        },
                        new
                        {
                            TeacherId = 2,
                            BranchId = 2
                        },
                        new
                        {
                            TeacherId = 3,
                            BranchId = 3
                        },
                        new
                        {
                            TeacherId = 4,
                            BranchId = 4
                        },
                        new
                        {
                            TeacherId = 5,
                            BranchId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            BranchId = 6
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            BranchId = 9
                        },
                        new
                        {
                            TeacherId = 8,
                            BranchId = 10
                        });
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeacherStudent", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents");

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 6
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c31f8d49-9a12-4f19-a03d-c358594cd9b6",
                            RoleId = "5d26f66f-2b0b-4516-99b2-d41133b08d86"
                        },
                        new
                        {
                            UserId = "f5f3d15a-b5ae-438b-a0a5-5088a553c665",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "cb76beb4-41d5-4904-9493-fd67702781b2",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "1a3110df-5cdf-4b46-80ff-402c0228c23c",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "007a6943-e32f-45ff-831a-8495521f0bd8",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "90c70b96-a9a7-47fd-a5b9-8a1cc1bd3cbd",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "ed580c86-2e0d-4979-b6fd-17b880d049d2",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "cfc42ab8-9dce-4c75-ab56-b028ce37d410",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "6995048a-a055-4e6e-9ad1-6826c195cbef",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "288292d3-c958-412e-b541-41d63c62ced1",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "018770f5-96dc-4b2e-a708-cfed11f446b0",
                            RoleId = "3182b0af-9c8b-4b85-9ca2-e515aa9c07cb"
                        },
                        new
                        {
                            UserId = "02fd7a75-988b-47aa-882f-7005f7ec1d34",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "728d8571-f0b8-4eea-adac-43f7951505c2",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "0e8d7b3b-9eb0-4d07-b0e9-7d86d02ee953",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "32d5a47e-b95c-49f2-87dd-e6bc21c6da2f",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "d67af878-0c23-47ed-8f47-a6df9883b511",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "6f90465e-7fff-4216-8a76-34e7b278e735",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "1754aa6b-9727-4bdf-ade0-7b5fa99a300f",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        },
                        new
                        {
                            UserId = "309ddd20-a098-4df6-ba4c-86a9d72f9a49",
                            RoleId = "eae1d03d-c1d5-4416-823d-038f86183653"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Advert", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("Adverts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Teacher", "Teacher")
                        .WithMany("Adverts")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cart", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("EntityLayer.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CartItem", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Identity.User", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Order", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.OrderItem", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Advert", "Advert")
                        .WithMany()
                        .HasForeignKey("AdvertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Student", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("EntityLayer.Concrete.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Teacher", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("EntityLayer.Concrete.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeacherBranch", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Branch", "Branch")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherBranches")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EntityLayer.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Student", "Student")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherStudents")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.Branch", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Identity.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Student", b =>
                {
                    b.Navigation("TeacherStudents");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Teacher", b =>
                {
                    b.Navigation("Adverts");

                    b.Navigation("TeacherBranches");

                    b.Navigation("TeacherStudents");
                });
#pragma warning restore 612, 618
        }
    }
}
